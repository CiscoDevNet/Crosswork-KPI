//-----------------------------------------------------------------------------
// pulse_device_uptime_template.tick - Pulse TICKscript Template
//
// Master template: stream-simple-threshold-below-master-template
//
// This Tick Script detects abnormal measured values.
//
// Threshold for measurement that causes alerts can be set
// in the vars JSON as 'alert_threshold'.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store a
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME KPI Profile id for filtering data stream
var profile_id string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_device_uptime'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'pulse_device_uptime'

//KPI_INTERNAL Alert message format string
var alert_message = '{{ .Level }} : Device Reloaded {{index .Fields "kpi_stream"}} sec back! '

//KPI_INTERNAL Alert ID for clear event
var clear_id = 'pulse_device_uptime'

//KPI_INTERNAL Clear message format string
var clear_message = '{{ .Level }} : Device uptime > Threshold.'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'SNMPv2-MIB:SNMPv2-MIB/system'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: TRUE

// KPI_INTERNAL filter var to filter data only related to kpi profile id
var where_producer = lambda: strContains("ProfileIDs", profile_id)

//KPI_INTERNAL Optional list of group by dimensions
var groups = [*]

//KPI_INTERNAL Lambda expression to reduce raw data to KPI
var stream_eval_lambda = lambda: float("sysUpTime")/100.0

//KPI_THRESHOLDS (Alert Threshold) Value that rate must exceed to enter alert state
var alert_threshold = 1800.0

//KPI_THRESHOLDS (Alert Critical Time) Time that needs to pass after entering the alert state to generate a CRIT alert (default 0 seconds)
var alert_crit_time = 0.0

//KPI_THRESHOLDS (Alert Warning Time) Time that needs to pass after entering the alert state to generate a WARN alert (default 0 seconds)
var alert_warn_time = 0.0

//KPI_THRESHOLDS (Clear Threshold) Threshold that this value must fall below or equal to enter the clear state
var clear_threshold = 3600.0

//KPI_THRESHOLDS (Clear Time) Time that needs to pass after entering the clear state to generate a CLEAR alert  (default 0 seconds)
var clear_time = 0.0

//KPI_INTERNAL Unit of time for alert alerts
var time_unit = 1s

//PULSE_RUN_TIME (Downsample Factor) Down sample factor for alert evaluation applied on data stream (Default : 1 , Min : 1 , Max : 10)
var downsample_factor = 1

var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()
    |sample(downsample_factor) //sample2


var transform = data
    |eval(stream_eval_lambda)             //evaluation/reduction of stream data done here //eval3
                .as('kpi_stream') //internal field reference
                .quiet()

var state = transform
    |stateDuration(lambda: "kpi_stream" < alert_threshold) //stateDuration4
                    .unit(time_unit)
                    .as('alert_duration')
    |stateDuration(lambda: "kpi_stream" >= clear_threshold) //stateDuration5
                    .unit(time_unit)
                    .as('clear_duration')
    |default() //insert the thresholds into the data stream //default6
        .field('alert_threshold', alert_threshold)
        .field('clear_threshold', clear_threshold)
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')
        .tag('profile_id', profile_id)


state
    |alert() //alert7
         // Warn after input time
         .warn(lambda: "alert_duration" >= alert_warn_time)
         // Critical after input time
         .crit(lambda: "alert_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where8
    |influxDBOut() //influxDBOut9
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

state
    |alert() //alert10
         //info on clear after input time
         .info(lambda: "clear_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(clear_id)
         .idField('id')
         .message(clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where11
    |influxDBOut() //influxDBOut12
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
