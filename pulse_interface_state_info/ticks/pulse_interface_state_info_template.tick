//-----------------------------------------------------------------------------
// interface_state_info-template.tick - Pulse Tick Script Template
//
// This TICKscript template is a special one to detect flapping on the actual state and
// actual line state interfaces over some window. Window is defined in the "flap_window"
// variable, and thresholds for tolerated flapping are defined in the flap_alert_threshold
// variables.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//70 Nodes

// PULSE_RUN_TIME VARS

//PULSE_RUN_TIME Alert db to store alerts to
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME Device name or regex for producer names
var uuid string

//KPI_INTERNAL VARS

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_interface_state_info'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'Cisco-IOS-XR-pfi-im-cmd-oper:interfaces/interface-briefs/interface-brief'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: isPresent("actual-state") AND isPresent("actual-line-state") AND "state" != 'im-state-admindown'

//KPI_INTERNAL filter var to filter data only related to producer(s)
var where_producer = lambda: TRUE

//KPI_INTERNAL Optional list of group by dimensions
var groups = ['Producer', 'interface-name']

// IDs for the alert and clear alerts

//KPI_INTERNAL Alert ID for when actual state is flapping
var actual_state_flap_alert_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual state is flapping
var actual_state_flap_alert_message = '{{ .Level }} : Actual State {{ index .Tags "interface-name" }}  Actual state flapping is high: {{ index .Fields "actual_shutdowns" }} flaps in the last {{index .Fields "flap_window" }}! Threshold: {{ index .Fields "actual_state_flap_alert_threshold" }}'

//KPI_INTERNAL Alert ID for when actual state is no longer flapping
var actual_state_flap_clear_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual state is no longer flapping
var actual_state_flap_clear_message = '{{ .Level }} : Actual State {{ index .Tags "interface-name" }}  Actual state flapping is acceptable: {{ index .Fields "actual_shutdowns" }} flaps in the last {{index .Fields "flap_window" }}. Threshold: {{ index .Fields "actual_state_flap_alert_threshold" }}'

//KPI_INTERNAL Alert ID for when actual state is down
var actual_state_down_alert_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual state is down
var actual_state_down_alert_message =  '{{ .Level }} : Actual State {{ index .Tags "interface-name" }}  Actual state has been down for {{ index .Fields "actual_state_down_time_alert" }} seconds!'

//KPI_INTERNAL Alert ID for when actual state is no longer down
var actual_state_down_clear_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual state is no longer down
var actual_state_down_clear_message =  '{{ .Level }} : Actual State {{ index .Tags "interface-name" }}  Actual state has been up for {{ index .Fields "actual_state_down_time_clear" }} seconds.'

//KPI_INTERNAL Alert ID for when actual line state is flapping
var actual_line_state_flap_alert_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual line state is flapping
var actual_line_state_flap_alert_message =  '{{ .Level }} : Actual Line State {{ index .Tags "interface-name" }}  Actual Line state flapping is high: {{ index .Fields "actual_line_shutdowns" }} flaps in the last {{index .Fields "flap_window" }}! Threshold: {{ index .Fields "actual_line_state_flap_alert_threshold" }}'

//KPI_INTERNAL Alert ID for when actual line state is no longer flapping
var actual_line_state_flap_clear_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual line state is no longer flapping
var actual_line_state_flap_clear_message =  '{{ .Level }} : Actual Line State {{ index .Tags "interface-name" }}  Actual Line state flapping is acceptable: {{ index .Fields "actual_line_shutdowns" }} flaps in the last {{index .Fields "flap_window" }}. Threshold: {{ index .Fields "actual_line_state_flap_alert_threshold" }}'

//KPI_INTERNAL Alert ID for when actual line state is down
var actual_line_state_down_alert_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual line state is down
var actual_line_state_down_alert_message =  '{{ .Level }} : Actual Line State {{ index .Tags "interface-name" }}  Actual line state has been down for {{ index .Fields "actual_line_state_down_time_alert" }} seconds!'

//KPI_INTERNAL Alert ID for when actual line state is no longer down
var actual_line_state_down_clear_id = 'pulse_interface_state_info'

//KPI_INTERNAL Alert message for when actual line state is no longer down
var actual_line_state_down_clear_message =  '{{ .Level }} : Actual Line State {{ index .Tags "interface-name" }}  Actual line state has been up for {{ index .Fields "actual_line_state_down_time_clear" }} seconds.'

//KPI_THRESHOLDS (Actual State Flap Alert Threshold) Minimum number of actual state flaps that need to occur during the flap window to enter alert state  (default 0)
var actual_state_flap_alert_threshold = 0.0

//KPI_THRESHOLDS (Actual State Flap Clear Threshold) Maximum number of actual state flaps that can occur during the flap window to remain in the clear state  (default 0)
var actual_state_flap_clear_threshold = 0.0

//KPI_THRESHOLDS (Actual Line Flap Alert Threshold) Minimum number of actual line state flaps that need to occur during the flap window to alert state (default 0)
var actual_line_state_flap_alert_threshold = 0.0

//KPI_THRESHOLDS (Actual Line State Flap Clear Threshold) Maximum number of actual line state flaps that can occur during the flap window to remain in clear state (default 0)
var actual_line_state_flap_clear_threshold = 0.0

//KPI_THRESHOLDS (Flap Alert Critical Time) Time that needs to pass after entering the flap alert state to generate a CRIT alert (default 0 seconds)
var flap_alert_crit_time = 1.0

//KPI_THRESHOLDS (Flap Alert Warning Time) Time that needs to pass after entering the flap alert state to generate a WARN alert (default equal to Flap Alert Critical Time)
var flap_alert_warn_time = 0.0

//KPI_THRESHOLDS (Down Alert Critical Time) Time (in seconds) an extended shutdown must last to generate a CRIT alert
var down_alert_crit_time = 120.0

//KPI_THRESHOLDS (Down Alert Warning Time) Time (in seconds) an extended shutdown must last to generate a WARN alert
var down_alert_warn_time = 0.0

//KPI_INTERNAL unit of time for alerts
var time_unit = 1s

//KPI_THRESHOLDS (Flap Clear Time) Time that needs to pass after entering the flap clear state to generate a clear alert (default 0 seconds)
var flap_clear_time = 0.0

//KPI_THRESHOLDS (Down Clear Time) Time that needs to pass after entering the shutdown clear state to generate a CLEAR alert (default 0 seconds)
var down_clear_time = 0.0

//KPI_INTERNAL Window for defining excessive up-down behavior
var flap_window = 5m

//KPI_INTERNAL  Frequency with which to report new flapping behavior
var freq = 0s

//KPI_INTERNAL down state definition for actual-state flapping
var actual_state_down_def = 'im-state-down'

//KPI_INTERNAL up state definition for actual-state flapping
var actual_state_up_def = 'im-state-up'

//KPI_INTERNAL down state definition for actual-state flapping
var actual_line_state_down_def = 'im-state-down'

//KPI_INTERNAL up state definition for actual-state flapping
var actual_line_state_up_def = 'im-state-up'


var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()
    |default() //insert kpi_id //default2
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')
    |delete() //need to delete 'state' field as it breaks state alert tag used by other kpis //delete3
        .field('state')

var actual_state_flapping = data
    |eval(lambda: if("actual-state" == actual_state_down_def, //eval4
                  2,
                  if("actual-state" == actual_state_up_def,
                          3,
                          0)
                          )
                          ) //state-down->2, state-up->3, else->0, so non-zero differences between non-admin states are only 1 and -1
                .as('actual_state_int') //internal field reference
        |difference('actual_state_int') //difference5
                .as('state_transition_edges')
        |window() //window6
        .period(flap_window)
        .every(freq)
        .fillPeriod()
        |where(lambda: "state_transition_edges" == 1) // up -> down transition //where7
        |count('state_transition_edges') //count8
        .as('actual_shutdowns')
        |stateDuration(lambda: "actual_shutdowns" > actual_state_flap_alert_threshold) //stateDuration9
                    .unit(time_unit)
                    .as('actual_state_flap_alert_duration')
    |stateDuration(lambda: "actual_shutdowns" <= actual_state_flap_clear_threshold) //stateDuration10
                    .unit(time_unit)
                    .as('actual_state_flap_clear_duration')

    |eval(lambda: string(flap_window)) //eval11
        .as('flap_window')
        .keep() //keeps all other fields which would have been deleted
    |default() //insert the thresholds into the data stream //default12
        .field('actual_state_flap_alert_threshold', actual_state_flap_alert_threshold)
        .field('actual_state_flap_clear_threshold', actual_state_flap_clear_threshold)


actual_state_flapping
    |alert() //alert13
         // Warn after input time
         .warn(lambda: "actual_state_flap_alert_duration" >= flap_alert_warn_time)
         // Critical after input time
         .crit(lambda: "actual_state_flap_alert_duration" >= flap_alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_state_flap_alert_id)
         .idField('id')
         .message(actual_state_flap_alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where14
    |influxDBOut() //influxDBOut15
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

actual_state_flapping
    |alert() //alert16
         //info on clear after input time
         .info(lambda: "actual_state_flap_clear_duration" >= flap_clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_state_flap_clear_id)
         .idField('id')
         .message(actual_state_flap_clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where17
    |influxDBOut() //influxDBOut18
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')

var actual_state_down = data
    |stateDuration(lambda: "actual-state" == actual_state_down_def) //stateDuration19
        .unit(time_unit)
        .as('actual_state_down_time_alert')
    |stateDuration(lambda: "actual-state" != actual_state_down_def) //stateDuration20
        .unit(time_unit)
        .as('actual_state_down_time_clear')

actual_state_down
    |alert() //alert21
         // Warn after input time
         .warn(lambda: "actual_state_down_time_alert" >= down_alert_warn_time)
         // Critical after input time
         .crit(lambda: "actual_state_down_time_alert" >= down_alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_state_down_alert_id)
         .idField('id')
         .message(actual_state_down_alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where22
    |influxDBOut() //influxDBOut23
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

actual_state_down
    |alert() //alert24
         //info on clear after input time
         .info(lambda: "actual_state_down_time_clear" >= down_clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_state_down_clear_id)
         .idField('id')
         .message(actual_state_down_clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where25
    |influxDBOut() //influxDBOut26
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')



//begin actual_line_state nodes

var actual_line_state_flapping = data
    |eval(lambda: if("actual-line-state" == actual_line_state_down_def, //eval27
                  2,
                  if("actual-line-state" == actual_line_state_up_def,
                          3,
                          0)
                          )
                          ) //state-down->2, state-up->3, else->0, so non-zero differences between non-admin states are only 1 and -1
                .as('actual_line_state_int') //internal field reference
        |difference('actual_line_state_int') //difference28
                .as('line_state_transition_edges')
        |window() //window29
        .period(flap_window)
        .every(freq)
        .fillPeriod()
        |where(lambda: "line_state_transition_edges" == 1) // up -> down transition //where30
        |count('line_state_transition_edges') //count31
        .as('actual_line_shutdowns')
        |stateDuration(lambda: "actual_line_shutdowns" > actual_line_state_flap_alert_threshold) //stateDuration32
                    .unit(time_unit)
                    .as('actual_line_state_flap_alert_duration')
    |stateDuration(lambda: "actual_line_shutdowns" <= actual_line_state_flap_clear_threshold) //stateDuration33
                    .unit(time_unit)
                    .as('actual_line_state_flap_clear_duration')

    |eval(lambda: string(flap_window)) //eval34
        .as('flap_window')
        .keep() //keeps all other fields which would have been deleted
    |default() //insert the thresholds into the data stream //default35
        .field('actual_line_state_flap_alert_threshold', actual_line_state_flap_alert_threshold)
        .field('actual_line_state_flap_clear_threshold', actual_line_state_flap_clear_threshold)

actual_line_state_flapping
    |alert() //alert36
         // Warn after input time
         .warn(lambda: "actual_line_state_flap_alert_duration" >= flap_alert_warn_time)
         // Critical after input time
         .crit(lambda: "actual_line_state_flap_alert_duration" >= flap_alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_line_state_flap_alert_id)
         .idField('id')
         .message(actual_line_state_flap_alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where37
    |influxDBOut() //influxDBOut38
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

actual_line_state_flapping
    |alert() //alert39
         //info on clear after input time
         .info(lambda: "actual_line_state_flap_clear_duration" >= flap_clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_line_state_flap_clear_id)
         .idField('id')
         .message(actual_line_state_flap_clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where40
    |influxDBOut() //influxDBOut41
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')

var actual_line_state_down = data
    |stateDuration(lambda: "actual-line-state" == actual_line_state_down_def) //stateDuration42
        .unit(time_unit)
        .as('actual_line_state_down_time_alert')
    |stateDuration(lambda: "actual-line-state" != actual_line_state_down_def) //stateDuration43
        .unit(time_unit)
        .as('actual_line_state_down_time_clear')

actual_line_state_down
    |alert() //alert44
         // Warn after input time
         .warn(lambda: "actual_line_state_down_time_alert" >= down_alert_warn_time)
         // Critical after input time
         .crit(lambda: "actual_line_state_down_time_alert" >= down_alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_line_state_down_alert_id)
         .idField('id')
         .message(actual_line_state_down_alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where45
    |influxDBOut() //influxDBOut46
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

actual_line_state_down
    |alert() //alert47
         //info on clear after input time
         .info(lambda: "actual_line_state_down_time_clear" >= down_clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(actual_line_state_down_clear_id)
         .idField('id')
         .message(actual_line_state_down_clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where48
    |influxDBOut() //influxDBOut49
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
