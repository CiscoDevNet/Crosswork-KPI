//-----------------------------------------------------------------------------
// pulse_interface_protocol_counters_rxrate_template.tick - Pulse TICKscript Template
//
// Master template: stream-stddev-aggregate-alert-master-template
//
// Based on Stream mode Time aggrigation and Standard deviation based alerting
// Master template stream-stddev-aggregate-alert-master-template
//
// This Tick Script detects spikes or drops in measured values by alerting when
// values deviate some number of standard deviations away from normal values.
// Threshold for number of standard deviations that cause alerts can be set
// in the vars JSON as 'alert_threshold'.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store alerts
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME Producer name or regex(future) for producer names
var uuid string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_intf_stat_protocol'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'pulse_intf_stat_protocol_counters_rxrate'

//KPI_INTERNAL Alert message format string
var alert_message = '{{ .Level }} : {{ index .Tags "interface-name" }}  Protocol: {{ index .Tags "protocol-name" }} Rx Rate: {{ index .Fields "kpi_stream_agg" | printf "%0.2f" }} pkts/sec is Unusual, Threshold: {{ index .Fields "alert_threshold" | printf "%0.2f" }} SD. It is {{ index .Fields "sigma" | printf "%0.2f"}} std.dev away from Average.'

//KPI_INTERNAL Alert ID for clear event
var clear_id = 'pulse_intf_stat_protocol_counters_rxrate'

//KPI_INTERNAL Clear message format string
var clear_message = '{{ .Level }} : {{ index .Tags "interface-name" }}  Protocol: {{ index .Tags "protocol-name" }} Rx Rate: {{ index .Fields "kpi_stream_agg" | printf "%0.2f" }} pkts/sec has returned to Usual range, Threshold: {{ index .Fields "clear_threshold" | printf "%0.2f" }} SD. It is {{ index .Fields "sigma" | printf "%0.2f"}} std.dev away from Average.'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'Cisco-IOS-XR-infra-statsd-oper:infra-statistics/interfaces/interface/latest/protocols/protocol'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: TRUE

// KPI_INTERNAL filter var to filter data only related to producer(s)
var where_producer = lambda: TRUE

//KPI_INTERNAL Optional list of group by dimensions
var groups = [*]

//KPI_INTERNAL Lambda expression to reduce raw data to KPI
var stream_eval_lambda = lambda: float("input-data-rate")

//KPI_THRESHOLDS (Alert Threshold) Generates an alert when the data sample does not fall within the number of standard deviations from the mean defined by this threshold
var alert_threshold = 2.0

//KPI_THRESHOLDS (Alert Critical Time) Time that needs to pass after entering the alert state to generate a CRIT alert (default 0 seconds)
var alert_crit_time = 0.0

//KPI_THRESHOLDS (Alert Warning Time) Time that needs to pass after entering the alert state to generate a WARN alert (default 0 seconds)
var alert_warn_time = 0.0

//KPI_THRESHOLDS (Clear Threshold) When a data sample falls within the number of standard deviations from the mean defined by this threshold, the sample enters the clear state
var clear_threshold = 2.0

//KPI_THRESHOLDS (Clear Time) Time that needs to pass after entering the clear state to generate a CLEAR alert  (default 0 seconds)
var clear_time = 0.0

//KPI_INTERNAL Unit of time for alert alerts
var time_unit = 1s

//KPI_INTERNAL Cadence of measurement data, sourced directly from KPI file
var cadence duration

// Node: data
// Input: stream from measurement, where filters, group by
// Output: streams as per the filter and group by above
var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()


// TODO Need the see how we can handle if we have multiple data-sets are returned like
// if we want to do SD based alerting on more than one field(s)
// Node: transform
// Input: data
// Output: kpi_stream
// Details: takes raw data and transforms it to kpi based on the stream_eval_lambda funtion
var transform = data
    |eval(stream_eval_lambda) //eval2
        .as('kpi_stream')
        .quiet()


// Node: time_aggregate
// Input: transformed data
// Output: Batch data , aggregated over the period of and window
// Details: Takes the transformed kpi data and identifies how many SDs away the sample is from mean
//          And keeps track of how long the value is in alert or clear condition
var time_aggregate = transform
 |window() //window3
    .period(cadence)
    .every(cadence)
        |sum('kpi_stream') //sum4
        .as('kpi_stream_agg')

// Node: stream_sd
// Input: transformed data
// Output: Sigma, alert_duration, clear_duration
// Details: Takes the transformed kpi data and identifies how many SDs away the sample is from mean
//          And keeps track of how long the value is in alert or clear condition
var stream_sd = time_aggregate
    |eval(lambda: sigma("kpi_stream_agg")) //eval5
        .as('sigma')
        .keep('kpi_stream_agg', 'sigma')
        |stateDuration(lambda: "sigma" >= alert_threshold) //stateDuration6
                    .unit(time_unit)
                    .as('alert_duration')
    |stateDuration(lambda: "sigma" < clear_threshold) //stateDuration7
                    .unit(time_unit)
                    .as('clear_duration')

    |eval(lambda: string(cadence)) //eval8
        .as('cadence')
        .keep() //keeps all other fields which would have been deleted
    |default() //insert the thresholds into the data stream //default9
        .field('alert_threshold', alert_threshold)
        .field('clear_threshold', clear_threshold)
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')

// Alerting Node for wanring and crtical
// Input: stream_sd
// Output: Warning and critical alerts
// TODO need to understand the exact format the ASTACK requires the alerts to be
// generated and posted
stream_sd
    |alert() //alert10
         // Warn after input time
         .warn(lambda: "alert_duration" >= alert_warn_time)
         // Critical after input time
         .crit(lambda: "alert_duration" >= alert_crit_time)
         .stateChangesOnly()
         //.critReset(lambda: "clear_duration" >= clear_time)
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where11
    |influxDBOut() //influxDBOut12
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

// Alerting Node for clear condition
// Input: stream_sd
// Output: clear alerts
// TODO need to understand the exact format the ASTACK requires the alerts to be
// generated and posted
stream_sd
    |alert() //alert13
         //info on clear after input time
         .info(lambda: "clear_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(clear_id)
         .idField('id')
         .message(clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where14
    |influxDBOut() //influxDBOut15
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
