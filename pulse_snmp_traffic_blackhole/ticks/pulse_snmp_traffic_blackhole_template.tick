//-----------------------------------------------------------------------------
// pulse_snmp_traffic_blackhole_template.tick - Pulse TICKscript Template
//
// Master template: stream_derivative_blackhole_detector-master-template
//
// This Tick Script detects deviations from unity for
// ratios of transmit data volume to receiving data volume.
// How far a deviation from unity to begin alerting can be set
// in the variable JSON file as 'alert_threshold'.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store a
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME KPI Profile id for filtering data stream
var profile_id string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_snmp_traffic_blackhole'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'pulse_snmp_traffic_blackhole'

//KPI_INTERNAL Alert message format string
var alert_message = '{{ .Level }} : Potential Traffic blackhole/Drops! Total Output Rate: {{ index .Fields "tx_sum" | printf "%0.2f" }} pkts/sec Total Input Rate: {{ index .Fields "rx_sum" | printf "%0.2f" }} pkts/sec, Tx/Rx Ratio: {{ index .Fields "tx_rx_ratio" | printf "%0.2f" }} < threshold: {{ index .Fields "alert_threshold" | printf "%0.2f"}}. Task: {{ .TaskName }}'

//KPI_INTERNAL Alert ID for clear event
var clear_id = 'pulse_snmp_traffic_blackhole'

//KPI_INTERNAL Clear message format string
var clear_message = '{{ .Level }} : Recovering from Traffic blackhole/Drops! Total Output Rate: {{ index .Fields "tx_sum" | printf "%0.2f" }} pkts/sec Total Input Rate: {{ index .Fields "rx_sum" | printf "%0.2f" }} pkts/sec, Tx/Rx Ratio: {{ index .Fields "tx_rx_ratio" | printf "%0.2f" }} >= threshold: {{ index .Fields "clear_threshold" | printf "%0.2f"}}. Task: {{ .TaskName }}'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'IF-MIB:IF-MIB/ifTable/ifEntry'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: "ifDescr" =~ /^(FastEthernet|GigabitEthernet|TenGigE|FortyGigE|HundredGigE)\d{1,2}?(\/\d{1,2}?){2,4}$/

// KPI_INTERNAL filter var to filter data only related to kpi profile id
var where_producer = lambda: strContains("ProfileIDs", profile_id)

//KPI_INTERNAL Optional list of group by dimensions
var groups = ['Producer', 'ifDescr']

//KPI_INTERNAL Lambda expression to reduce raw data to value to use for tx data
var tx_eval_lambda = lambda: float("ifHCOutOctets")

//KPI_INTERNAL Lambda expression to reduce raw data to value to use for rx data
var rx_eval_lambda = lambda: float("ifHCInOctets")

//KPI_THRESHOLDS (Alert Threshold) Generates an alert when the ratio of transmitted to received data falls below this threshold
var alert_threshold = 0.9

//KPI_THRESHOLDS (Alert Critical Time) Time that needs to pass after entering the alert state to generate a CRIT alert (default 0 seconds)
var alert_crit_time = 2.0

//KPI_THRESHOLDS (Alert Warning Time) Time that needs to pass after entering the alert state to generate a WARN alert (default 0 seconds)
var alert_warn_time = 0.0

//KPI_THRESHOLDS (Clear Threshold) Minimum ratio of transmitted to received data to be in clear state
var clear_threshold = 0.9

//KPI_THRESHOLDS (Clear Time) Time that needs to pass after entering the clear state to generate a CLEAR alert  (default 0 seconds)
var clear_time = 1.0

//KPI_INTERNAL Unit of time for alert alerts
var time_unit = 1s

//KPI_INTERNAL Cadence of measurement data, sourced directly from KPI file
var cadence duration

//PULSE_RUN_TIME (Downsample Factor) Down sample factor for alert evaluation applied on data stream (Default : 1 , Min : 1 , Max : 10)
var downsample_factor = 1

var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()
    |sample(downsample_factor) //sample2

var transform = data
    |eval(tx_eval_lambda, rx_eval_lambda) //eval3
        .as('tx_eval_result', 'rx_eval_result')
        .keep('tx_eval_result', 'rx_eval_result')
        .quiet()

var rate = transform
    |derivative('tx_eval_result') //derivative4
        .unit(1s)
        .as('tx_rate')
        .quiet()
    |derivative('rx_eval_result') //derivative5
        .unit(1s)
        .as('rx_rate')
        .quiet()

var time_aggregate = rate //aggregate all interfaces together
    |window() //window6
        .period(cadence)
        .every(cadence)
        .align()
    |groupBy('Producer') //groupBy7

var tx_sum_branch = time_aggregate //to be joined into later
    |sum('tx_rate') //sum8
        .as('sum')

var rx_sum_branch = time_aggregate
    |sum('rx_rate') //sum9
        .as('sum')

var tx_rx_ratio_branch = tx_sum_branch //MUST RENAME THE JOIN BRANCH IN ORDER TO REFER TO IT
    |join(rx_sum_branch)  //sum nodes (subclass of InfluxQL nodes), delete all other fields, so need to join back together to find ratio //join10
        .as('tx', 'rx')
        .delimiter('_')
        .tolerance(1s)
        .fill(0.0001)  //fills nils, not zeroes, should not ever need to occur
        |eval(lambda: "tx_sum" / ("rx_sum" + 0.0001) ) //to prevent div by 0 //eval11
        .as('tx_rx_ratio')
        .keep()

var black_hole_alert = tx_rx_ratio_branch
    |stateDuration(lambda: "tx_rx_ratio" <= alert_threshold) //stateDuration12
        .unit(time_unit)
        .as('alert_duration')
    |stateDuration(lambda: "tx_rx_ratio" > clear_threshold) //stateDuration13
        .unit(time_unit)
        .as('clear_duration')

    |eval(lambda: string(cadence)) //eval14
        .as('cadence')
        .keep() //keeps all other fields which would have been deleted
    |default() //insert the thresholds into the data stream //default15
        .field('alert_threshold', alert_threshold)
        .field('clear_threshold', clear_threshold)
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')
        .tag('profile_id', profile_id)


black_hole_alert
    |alert() //alert16
         // Warn after input time
         .warn(lambda: "alert_duration" >= alert_warn_time)
         // Critical after input time
         .crit(lambda: "alert_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where17
    |influxDBOut() //influxDBOut18
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

black_hole_alert
    |alert() //alert19
         //info on clear after input time
         .info(lambda: "clear_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(clear_id)
         .idField('id')
         .message(clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where20
    |influxDBOut() //influxDBOut21
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
