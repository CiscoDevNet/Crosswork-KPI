//-----------------------------------------------------------------------------
// pulse_routing_ipv6_rib_isis_routememory_template.tick - Pulse TICKscript Template
//
// Master template: stream-stddev-activate-master-template
//
// Description: This alert template detects spikes or drops in measured values
// by alerting when values deviate some number of standard deviations away
// from normal values.
//
// Activation threshold determines above what raw value data must be to alert
// on standard deviation. If Activiation is -1, then it is ignored
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store alerts
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME Producer name or regex(future) for producer names
var profile_id string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_routing_ipv6_rib_isis'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'pulse_routing_ipv6_rib_isis_routememory'

//KPI_INTERNAL Alert message format string
var alert_message = '{{ .Level }} : ISIS IPv6 RIB Route Memory: {{ index .Fields "kpi_stream" | printf "%0.2f" }} bytes is Unusual, Threshold: {{if eq .Level "CRITICAL"}}{{index .Fields "crit_threshold" | printf "%0.2f"}}{{else if eq .Level "WARNING"}}{{index .Fields "warn_threshold" | printf "%0.2f"}}{{end}} SD. It is {{ index .Fields "sigma" | printf "%0.2f"}} std.dev away from Average.'

//KPI_INTERNAL Clear message format string
var clear_message = '{{ .Level }} : ISIS IPv6 RIB Route Memory: {{ index .Fields "kpi_stream" | printf "%0.2f" }} bytes has returned to Usual range, Threshold: {{ index .Fields "clear_threshold" | printf "%0.2f" }} SD. It is {{ index .Fields "sigma" | printf "%0.2f"}} std.dev away from Average.'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'Cisco-IOS-XR-ip-rib-ipv6-oper:ipv6-rib/vrfs/vrf/afs/af/safs/saf/ip-rib-route-table-names/ip-rib-route-table-name/protocol/isis/as/information'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: TRUE

// KPI_INTERNAL filter var to filter data only related to kpi profile id
var where_producer = lambda: strContains("ProfileIDs", profile_id)

//KPI_INTERNAL Optional list of group by dimensions
var groups = [*]

//KPI_INTERNAL Lambda expression to reduce raw data to KPI
var stream_eval_lambda = lambda: float("protocol-route-memory")

//KPI_THRESHOLDS (Critical Alert Threshold) Generates an alert when the data sample does not fall within the number of standard deviations from the mean defined by this threshold
var crit_threshold = 2.0

//KPI_THRESHOLDS (Warning Alert Threshold) Generates an alert when the data sample does not fall within the number of standard deviations from the mean defined by this threshold
var warn_threshold = 2.0

//KPI_THRESHOLDS (Clear Threshold) When a data sample falls within the number of standard deviations from the mean defined by this threshold, the sample enters the clear state
var clear_threshold = 2.0

//KPI_THRESHOLDS (Activation Threshold) Values must exceed the activation threshold to generate a standard deviation alert, if -1, ignored.
var activation_threshold = -1.0

//PULSE_RUN_TIME (Downsample Factor) Down sample factor for alert evaluation applied on data stream (Default : 1 , Min : 1 , Max : 10)
var downsample_factor = 1

// Node: data
// Input: stream from measurement, where filters, group by
// Output: streams as per the filter and group by above
var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()
    |sample(downsample_factor) //sample2



// TODO Need the see how we can handle if we have multiple data-sets are returned like
// if we want to do SD based alerting on more than one field(s)
// Node: transform
// Input: data
// Output: kpi_stream
// Details: takes raw data and transforms it to kpi based on the stream_eval_lambda funtion
var transform = data
    |eval(stream_eval_lambda) //eval3
        .as('kpi_stream')
        .quiet()


// Node: stream_sd
// Input: transformed data
// Output: Sigma, alert_duration, clear_duration
// Details: Takes the transformed kpi data and identifies how many SDs away the sample is from mean
//          And keeps track of how long the value is in alert or clear condition
var stream_sd = transform
    |eval(lambda: sigma("kpi_stream")) //eval4
        .as('sigma')
        .keep('kpi_stream', 'sigma')
    |default() //insert the thresholds into the data stream //default5
        .field('crit_threshold', crit_threshold)
        .field('warn_threshold', warn_threshold)
        .field('clear_threshold', clear_threshold)
        .field('activation_threshold', activation_threshold)
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')
        .tag('profile_id', profile_id)

// Alerting Node for warning and crtical
// Input: stream_sd
// Output: Warning and critical alerts
// TODO need to understand the exact format the ASTACK requires the alerts to be
// generated and posted
stream_sd
    |alert() //alert6
         // Warning on warning threshold
         .warn(lambda: ("sigma" >= warn_threshold AND (("kpi_stream" >= activation_threshold AND activation_threshold != -1) OR activation_threshold == -1)))
         // Critical on critical threshold
         .crit(lambda: ("sigma" >= crit_threshold AND (("kpi_stream" >= activation_threshold AND activation_threshold != -1) OR activation_threshold == -1)))
         .stateChangesOnly()
         //.critReset(lambda: "clear_duration" >= clear_time)
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(alert_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where7
    |influxDBOut() //influxDBOut8
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alert')

// Alerting Node for clear condition
// Input: stream_sd
// Output: clear alerts
// TODO need to understand the exact format the ASTACK requires the alerts to be
// generated and posted
stream_sd
    |alert() //alert9
         //info on clear threshold
         .info(lambda: ("sigma" < clear_threshold))
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(clear_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where10
    |influxDBOut() //influxDBOut11
         .database(alerts_db)
         .retentionPolicy(alerts_rp)
         .measurement(alerts_meas)
         .tag('state', 'clear')
