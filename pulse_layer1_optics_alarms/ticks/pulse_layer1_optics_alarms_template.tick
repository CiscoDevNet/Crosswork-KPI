//-----------------------------------------------------------------------------
// pulse_layer1_optics_alarms_template.tick - Pulse TICKscript Template
//
// Master template: layer1_optics_alarms-master-template
//
// This TICKscript is a special one used for the ethernet optics layer1 alarms kpi.
// It consists of 10 different alarms with three possible states, alarm-set, alarm-not-set, alarm-not-supported.
// The var file 'vars/pulse_layer1_optics_alarms_vars.json' exists with a naive variable definition.
//
// Copyright (c) 2017 by Cisco Systems, Inc.
// All rights reserved.
//-----------------------------------------------------------------------------

//PULSE_RUN_TIME Alert db to store back to
var alerts_db string

//PULSE_RUN_TIME InfluxDB Measurement for storing alerts back
var alerts_meas string

//PULSE_RUN_TIME InfluxDB RP for storing alerts back
var alerts_rp string

//PULSE_RUN_TIME Producer name or regex for producer names
var uuid string

//KPI_INTERNAL KPI ID of the kpi this TICKscript measures
var kpi_id = 'pulse_layer1_optics_alarms'

//KPI_INTERNAL Alert ID for this KPI Alert event
var alert_id = 'pulse_layer1_optics_alarms'

//KPI_INTERNAL Alert ID for clear event
var clear_id = 'pulse_layer1_optics_alarms'

//KPI_INTERNAL Measurement in influxDB to retrieve the data from
var measurement = 'Cisco-IOS-XR-drivers-media-eth-oper:ethernet-interface/interfaces/interface'

//KPI_INTERNAL Optional where filter expression to filter data stream before passing for transformation
var where_filter = lambda: isPresent("layer1-info__current-alarms__hi-ber-alarm") AND isPresent("layer1-info__current-alarms__local-fault-alarm") AND isPresent("layer1-info__current-alarms__loss-of-synchronization-data-alarm") AND isPresent("layer1-info__current-alarms__pcs-loss-of-block-lock-alarm") AND isPresent("layer1-info__current-alarms__received-loss-of-signal-alarm") AND isPresent("layer1-info__current-alarms__remote-fault-alarm") AND isPresent("layer1-info__current-alarms__rx-opd-alarm") AND isPresent("layer1-info__current-alarms__sd-ber-alarm") AND isPresent("layer1-info__current-alarms__squelch-alarm")

// KPI_INTERNAL filter var to filter data only related to producer(s)
var where_producer = lambda: TRUE

//KPI_INTERNAL Optional list of group by dimensions
var groups = ['Producer', 'interface-name']

//KPI_INTERNAL Lambda expression to reduce raw data to KPI
//var stream_eval_lambda = lambda: "phy-info__phy-details__dig-opt-mon-alarms__transceiver-voltage"

//KPI_THRESHOLDS (Alarm-Set String) String indicating value is in major high state
var alarm_set_string = 'alarm-set'

//KPI_THRESHOLDS (Alarm-Not-Supported String) String indicating value is in minor high state
var not_supported_string = 'alarm-not-supported'

//KPI_THRESHOLDS (Alarm-Not-Set String) String indicating value is in normal state
var alarm_not_set_string = 'alarm-not-set'

//KPI_THRESHOLDS (Alert Critical Time) Time that needs to pass after entering the alert state to generate a CRIT alert (default 0 seconds)
var alert_crit_time = 0.0

//KPI_THRESHOLDS (Alert Warning Time) Time that needs to pass after entering the alert state to generate a WARN alert (default equal to Alert Critical Time value)
var alert_warn_time = 0.0

//KPI_INTERNAL Unit of time for alert alerts
var time_unit = 1s

//KPI_THRESHOLDS (Clear Time) Time that needs to pass after entering the clear state to generate a CLEAR alert  (default 0 seconds)
var clear_time = 0.0

//KPI_INTERNAL Message when data is in major high state
var hi_ber_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm: hi_ber alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var hi_ber_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  hi_ber alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var hi_ber_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  hi_ber alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var local_fault_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  local_fault alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var local_fault_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  local_fault alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var local_fault_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  local_fault alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var loss_of_synchronization_data_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  loss_of_synchronization_data alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var loss_of_synchronization_data_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  loss_of_synchronization_data alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var loss_of_synchronization_data_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  loss_of_synchronization_data alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var pcs_loss_of_block_lock_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  pcs_loss_of_block_lock alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var pcs_loss_of_block_lock_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  pcs_loss_of_block_lock alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var pcs_loss_of_block_lock_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  pcs_loss_of_block_lock alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var received_loss_of_signal_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  received_loss_of_signal alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var received_loss_of_signal_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  received_loss_of_signal alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var received_loss_of_signal_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  received_loss_of_signal alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var remote_fault_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  remote_fault alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var remote_fault_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  remote_fault alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var remote_fault_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  remote_fault alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var rx_opd_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  rx_opd alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var rx_opd_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  rx_opd alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var rx_opd_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  rx_opd alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var sd_ber_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sd_ber alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var sd_ber_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sd_ber alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var sd_ber_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sd_ber alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var sf_ber_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sf_ber alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var sf_ber_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sf_ber alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var sf_ber_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  sf_ber alarm is not set.'

//KPI_INTERNAL Message when data is in major high state
var squelch_alarm_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  squelch alarm is set!.'

//KPI_INTERNAL Message when data is in minor high state
var squelch_not_supported_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  squelch alarm is not supported.'

//KPI_INTERNAL Message when data is in alarm_not_set state
var squelch_alarm_not_set_message = '{{ .Level }} : {{ index .Tags "interface-name"  }} Alarm:  squelch alarm is not set.'

var data = stream //stream0
    |from() //from1
        .measurement(measurement)
        .where(where_producer)
        .where(where_filter)
        .groupBy(groups)
        .quiet()
    |default() //insert kpi_id //default2
        .tag('kpi_id', kpi_id)
        .field('alert_src', 'TICK')

var hi_ber_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__hi-ber-alarm") //eval3
        .as('hi_ber')

    |stateDuration(lambda: "hi_ber" == alarm_set_string) //stateDuration4
                    .unit(time_unit)
                    .as('hi_ber_alarm_set_duration')
    |stateDuration(lambda: "hi_ber" == not_supported_string) //stateDuration5
                    .unit(time_unit)
                    .as('hi_ber_not_supported_duration')
    |stateDuration(lambda: "hi_ber" == alarm_not_set_string ) //stateDuration6
                    .unit(time_unit)
                    .as('hi_ber_alarm_not_set_duration')

hi_ber_alarm_branch
    |alert() //alert7
         // Critical after input time
         .crit(lambda: "hi_ber_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(hi_ber_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where8
    |influxDBOut() //influxDBOut9
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'hi_ber')

hi_ber_alarm_branch
    |alert() //alert10
         // Warn after input time
         .info(lambda: "hi_ber_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(hi_ber_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where11
    |influxDBOut() //influxDBOut12
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'hi_ber')

hi_ber_alarm_branch
    |alert() //alert13
        //info on clear after input time
         .info(lambda: "hi_ber_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(hi_ber_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where14
    |influxDBOut() //influxDBOut15
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'hi_ber')

var local_fault_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__local-fault-alarm") //eval16
        .as('local_fault')

    |stateDuration(lambda: "local_fault" == alarm_set_string) //stateDuration17
                    .unit(time_unit)
                    .as('local_fault_alarm_set_duration')
    |stateDuration(lambda: "local_fault" == not_supported_string) //stateDuration18
                    .unit(time_unit)
                    .as('local_fault_not_supported_duration')
    |stateDuration(lambda: "local_fault" == alarm_not_set_string ) //stateDuration19
                    .unit(time_unit)
                    .as('local_fault_alarm_not_set_duration')

local_fault_alarm_branch
    |alert() //alert20
         // Critical after input time
         .crit(lambda: "local_fault_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(local_fault_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where21
    |influxDBOut() //influxDBOut22
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'local_fault')

local_fault_alarm_branch
    |alert() //alert23
         // Warn after input time
         .info(lambda: "local_fault_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(local_fault_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where24
    |influxDBOut() //influxDBOut25
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'local_fault')

local_fault_alarm_branch
    |alert() //alert26
        //info on clear after input time
         .info(lambda: "local_fault_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(local_fault_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where27
    |influxDBOut() //influxDBOut28
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'local_fault')

var loss_of_synchronization_data_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__loss-of-synchronization-data-alarm") //eval29
        .as('loss_of_synchronization_data')

    |stateDuration(lambda: "loss_of_synchronization_data" == alarm_set_string) //stateDuration30
                    .unit(time_unit)
                    .as('loss_of_synchronization_data_alarm_set_duration')


    |stateDuration(lambda: "loss_of_synchronization_data" == not_supported_string) //stateDuration31
                    .unit(time_unit)
                    .as('loss_of_synchronization_data_not_supported_duration')

    |stateDuration(lambda: "loss_of_synchronization_data" == alarm_not_set_string ) //stateDuration32
                    .unit(time_unit)
                    .as('loss_of_synchronization_data_alarm_not_set_duration')
loss_of_synchronization_data_alarm_branch
    |alert() //alert33
         // Critical after input time
         .crit(lambda: "loss_of_synchronization_data_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(loss_of_synchronization_data_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where34
    |influxDBOut() //influxDBOut35
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'loss_of_synchronization_data')

loss_of_synchronization_data_alarm_branch
    |alert() //alert36
         // Warn after input time
         .info(lambda: "loss_of_synchronization_data_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(loss_of_synchronization_data_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where37
    |influxDBOut() //influxDBOut38
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'loss_of_synchronization_data')

loss_of_synchronization_data_alarm_branch
    |alert() //alert39
        //info on clear after input time
         .info(lambda: "loss_of_synchronization_data_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(loss_of_synchronization_data_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where40
    |influxDBOut() //influxDBOut41
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'loss_of_synchronization_data')

var pcs_loss_of_block_lock_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__pcs-loss-of-block-lock-alarm") //eval42
        .as('pcs_loss_of_block_lock')

    |stateDuration(lambda: "pcs_loss_of_block_lock" == alarm_set_string) //stateDuration43
                    .unit(time_unit)
                    .as('pcs_loss_of_block_lock_alarm_set_duration')
    |stateDuration(lambda: "pcs_loss_of_block_lock" == not_supported_string) //stateDuration44
                    .unit(time_unit)
                    .as('pcs_loss_of_block_lock_not_supported_duration')
    |stateDuration(lambda: "pcs_loss_of_block_lock" == alarm_not_set_string ) //stateDuration45
                    .unit(time_unit)
                    .as('pcs_loss_of_block_lock_alarm_not_set_duration')

pcs_loss_of_block_lock_alarm_branch
    |alert() //alert46
         // Critical after input time
         .crit(lambda: "pcs_loss_of_block_lock_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(pcs_loss_of_block_lock_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where47
    |influxDBOut() //influxDBOut48
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'pcs_loss_of_block_lock')

pcs_loss_of_block_lock_alarm_branch
    |alert() //alert49
         // Warn after input time
         .info(lambda: "pcs_loss_of_block_lock_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(pcs_loss_of_block_lock_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where50
    |influxDBOut() //influxDBOut51
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'pcs_loss_of_block_lock')

pcs_loss_of_block_lock_alarm_branch
    |alert() //alert52
        //info on clear after input time
         .info(lambda: "pcs_loss_of_block_lock_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(pcs_loss_of_block_lock_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where53
    |influxDBOut() //influxDBOut54
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'pcs_loss_of_block_lock')

var received_loss_of_signal_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__received-loss-of-signal-alarm") //eval55
        .as('received_loss_of_signal')

    |stateDuration(lambda: "received_loss_of_signal" == alarm_set_string) //stateDuration56
                    .unit(time_unit)
                    .as('received_loss_of_signal_alarm_set_duration')

    |stateDuration(lambda: "received_loss_of_signal" == not_supported_string) //stateDuration57
                    .unit(time_unit)
                    .as('received_loss_of_signal_not_supported_duration')

    |stateDuration(lambda: "received_loss_of_signal" == alarm_not_set_string ) //stateDuration58
                    .unit(time_unit)
                    .as('received_loss_of_signal_alarm_not_set_duration')

received_loss_of_signal_alarm_branch
    |alert() //alert59
         // Critical after input time
         .crit(lambda: "received_loss_of_signal_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(received_loss_of_signal_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where60
    |influxDBOut() //influxDBOut61
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'received_loss_of_signal')

received_loss_of_signal_alarm_branch
    |alert() //alert62
         // Warn after input time
         .info(lambda: "received_loss_of_signal_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(received_loss_of_signal_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where63
    |influxDBOut() //influxDBOut64
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'received_loss_of_signal')

received_loss_of_signal_alarm_branch
    |alert() //alert65
        //info on clear after input time
         .info(lambda: "received_loss_of_signal_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(received_loss_of_signal_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where66
    |influxDBOut() //influxDBOut67
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'received_loss_of_signal')

var remote_fault_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__remote-fault-alarm") //eval68
        .as('remote_fault')

    |stateDuration(lambda: "remote_fault" == alarm_set_string) //stateDuration69
                    .unit(time_unit)
                    .as('remote_fault_alarm_set_duration')

    |stateDuration(lambda: "remote_fault" == not_supported_string) //stateDuration70
                    .unit(time_unit)
                    .as('remote_fault_not_supported_duration')

    |stateDuration(lambda: "remote_fault" == alarm_not_set_string ) //stateDuration71
                    .unit(time_unit)
                    .as('remote_fault_alarm_not_set_duration')

remote_fault_alarm_branch
    |alert() //alert72
         // Critical after input time
         .crit(lambda: "remote_fault_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(remote_fault_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where73
    |influxDBOut() //influxDBOut74
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'remote_fault')

remote_fault_alarm_branch
    |alert() //alert75
         // Warn after input time
         .info(lambda: "remote_fault_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(remote_fault_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where76
    |influxDBOut() //influxDBOut77
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'remote_fault')

remote_fault_alarm_branch
    |alert() //alert78
        //info on clear after input time
         .info(lambda: "remote_fault_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(remote_fault_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where79
    |influxDBOut() //influxDBOut80
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'remote_fault')

var rx_opd_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__rx-opd-alarm") //eval81
        .as('rx_opd')

    |stateDuration(lambda: "rx_opd" == alarm_set_string) //stateDuration82
                    .unit(time_unit)
                    .as('rx_opd_alarm_set_duration')

    |stateDuration(lambda: "rx_opd" == not_supported_string) //stateDuration83
                    .unit(time_unit)
                    .as('rx_opd_not_supported_duration')

    |stateDuration(lambda: "rx_opd" == alarm_not_set_string ) //stateDuration84
                    .unit(time_unit)
                    .as('rx_opd_alarm_not_set_duration')

rx_opd_alarm_branch
    |alert() //alert85
         // Critical after input time
         .crit(lambda: "rx_opd_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(rx_opd_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where86
    |influxDBOut() //influxDBOut87
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'rx_opd')

rx_opd_alarm_branch
    |alert() //alert88
         // Warn after input time
         .info(lambda: "rx_opd_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(rx_opd_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where89
    |influxDBOut() //influxDBOut90
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'rx_opd')

rx_opd_alarm_branch
    |alert() //alert91
        //info on clear after input time
         .info(lambda: "rx_opd_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(rx_opd_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where92
    |influxDBOut() //influxDBOut93
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'rx_opd')

var sd_ber_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__sd-ber-alarm") //eval94
        .as('sd_ber')

    |stateDuration(lambda: "sd_ber" == alarm_set_string) //stateDuration95
                    .unit(time_unit)
                    .as('sd_ber_alarm_set_duration')

    |stateDuration(lambda: "sd_ber" == not_supported_string) //stateDuration96
                    .unit(time_unit)
                    .as('sd_ber_not_supported_duration')

    |stateDuration(lambda: "sd_ber" == alarm_not_set_string ) //stateDuration97
                    .unit(time_unit)
                    .as('sd_ber_alarm_not_set_duration')

sd_ber_alarm_branch
    |alert() //alert98
         // Critical after input time
         .crit(lambda: "sd_ber_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sd_ber_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where99
    |influxDBOut() //influxDBOut100
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'sd_ber')

sd_ber_alarm_branch
    |alert() //alert101
         // Warn after input time
         .info(lambda: "sd_ber_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sd_ber_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where102
    |influxDBOut() //influxDBOut103
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'sd_ber')

sd_ber_alarm_branch
    |alert() //alert104
        //info on clear after input time
         .info(lambda: "sd_ber_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sd_ber_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where105
    |influxDBOut() //influxDBOut106
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'sd_ber')

var sf_ber_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__sf-ber-alarm") //eval107
        .as('sf_ber')

    |stateDuration(lambda: "sf_ber" == alarm_set_string) //stateDuration108
                    .unit(time_unit)
                    .as('sf_ber_alarm_set_duration')

    |stateDuration(lambda: "sf_ber" == not_supported_string) //stateDuration109
                    .unit(time_unit)
                    .as('sf_ber_not_supported_duration')

    |stateDuration(lambda: "sf_ber" == alarm_not_set_string ) //stateDuration110
                    .unit(time_unit)
                    .as('sf_ber_alarm_not_set_duration')

sf_ber_alarm_branch
    |alert() //alert111
         // Critical after input time
         .crit(lambda: "sf_ber_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sf_ber_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where112
    |influxDBOut() //influxDBOut113
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'sf_ber')

sf_ber_alarm_branch
    |alert() //alert114
         // Warn after input time
         .info(lambda: "sf_ber_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sf_ber_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where115
    |influxDBOut() //influxDBOut116
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'sf_ber')

sf_ber_alarm_branch
    |alert() //alert117
        //info on clear after input time
         .info(lambda: "sf_ber_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(sf_ber_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where118
    |influxDBOut() //influxDBOut119
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'sf_ber')

var squelch_alarm_branch = data
    |eval(lambda: "layer1-info__current-alarms__squelch-alarm") //eval120
        .as('squelch')

    |stateDuration(lambda: "squelch" == alarm_set_string) //stateDuration121
                    .unit(time_unit)
                    .as('squelch_alarm_set_duration')


    |stateDuration(lambda: "squelch" == not_supported_string) //stateDuration122
                    .unit(time_unit)
                    .as('squelch_not_supported_duration')

    |stateDuration(lambda: "squelch" == alarm_not_set_string ) //stateDuration123
                    .unit(time_unit)
                    .as('squelch_alarm_not_set_duration')

squelch_alarm_branch
    |alert() //alert124
         // Critical after input time
         .crit(lambda: "squelch_alarm_set_duration" >= alert_crit_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(squelch_alarm_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where125
    |influxDBOut() //influxDBOut126
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_set_alert')
        .tag('layer1_optic_alarm', 'squelch')

squelch_alarm_branch
    |alert() //alert127
         // Warn after input time
         .info(lambda: "squelch_not_supported_duration" >= 0.0)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(squelch_not_supported_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where128
    |influxDBOut() //influxDBOut129
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'not_supported_alert')
        .tag('layer1_optic_alarm', 'squelch')

squelch_alarm_branch
    |alert() //alert130
        //info on clear after input time
         .info(lambda: "squelch_alarm_not_set_duration" >= clear_time)
         .stateChangesOnly()
         .levelTag('level')
         .id(alert_id)
         .idField('id')
         .message(squelch_alarm_not_set_message)
         .messageField('msg')
    |where(lambda: "level" != 'OK') //filter OKs out //where131
    |influxDBOut() //influxDBOut132
        .database(alerts_db)
        .retentionPolicy(alerts_rp)
        .measurement(alerts_meas)
        .tag('state', 'alarm_not_set_alert')
        .tag('layer1_optic_alarm', 'squelch')
